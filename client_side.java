/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatapp;

import java.io.DataInputStream;
import java.net.Socket;
import java.io.DataOutputStream;
import java.net.*;
/**
 *
 * @author Husnain Raza
 */
public class client_side extends javax.swing.JFrame {

    /**
     * Creates new form client_side
     */
    
    static Socket s;
    static DataInputStream data_in;
    static DataOutputStream data_out;
    static String check_msg;
    private static String pc_name="";
   private static int key=0;
   private static String cryptic_msg="";
   private static String decoded_msg="";
   private static int count=0;
   private static String addr_mac="";
    public client_side() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        disp_msg = new javax.swing.JTextArea();
        typed_msg = new javax.swing.JTextField();
        send_btn1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        disp_msg.setEditable(false);
        disp_msg.setColumns(20);
        disp_msg.setRows(5);
        jScrollPane1.setViewportView(disp_msg);

        typed_msg.setText("type your msg here....");

        send_btn1.setText("Send to Server");
        send_btn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                send_btn1ActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(51, 0, 51));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("                     Client Window");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(typed_msg, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(send_btn1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(typed_msg)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(send_btn1, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void send_btn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_send_btn1ActionPerformed
        // TODO add your handling code here:
        try{
            
            //To Send PC Name Through BUTTON i.e. not automatically
            
          /*  check_msg=check_msg.toLowerCase();
            if(check_msg.equals("what is your computer name?")){
            
                try{
                 String computername=InetAddress.getLocalHost().getHostName();
                 String send_txt="";
        send_txt=computername;
        data_out.writeUTF(send_txt); //client sending msg to server
  }
                catch (Exception e){
                                System.out.println("Exception caught ="+e.getMessage());
                                                            }
            
            }
            */
            
           // else{
        String send_txt="";
        send_txt=typed_msg.getText().trim();
        
        
        encryption(send_txt);

        data_out.writeUTF(cryptic_msg); //client sending msg to server
          //  }
        }
        catch(Exception e){}
    }//GEN-LAST:event_send_btn1ActionPerformed


//  *******************************KEY GENERATION***********************************
    
    static void key(String str){
    
   
                        System.out.println("Client Side Backend processes: ");
                        //adding ASCII VALUES OF THE STRING
                        
  
                          int sum=0;
                          for(int i=0; i<str.length(); i++)
                    {
                                             int asciiValue = str.charAt(i);
                                            sum = sum+ asciiValue;
                                            //System.out.println(str.charAt(i) + "=" + asciiValue);
                        }
                          double avg=sum/str.length();
                          int roundoff=(int) avg;
                          key=roundoff%26;
                                        System.out.println("ASCII of " + str + "=" + sum);
                                        System.out.println("Key Value is : "+key);
                        
        
        
    }
    
    
    //key generation code ends
    
    
    //***************ENCRYPTION*********************
    
    public void encryption(String S){
                cryptic_msg="";
        if(S.equals("what is your computer name?") || S.equals("what is your mac address?")){
        cryptic_msg= S;
        }
        else{
            count++;
            System.out.println("Count is "+count);
            if(count>=6){
            key_change();
            }
    for(int i=0; i<S.length(); i++)
                    {
                                             int asciiValue = S.charAt(i);
                                            asciiValue = key+ asciiValue;
                                            if(asciiValue>126){
                                            asciiValue=(asciiValue%127)+33;   // when ascii exceeds 126 it shows no presentable symbols and addition of 33 is done to bring it under the range of presentable symbols
                                                    }
                                            System.out.println(asciiValue);
                                            cryptic_msg=cryptic_msg+""+(char)asciiValue;
                                            asciiValue=0;
                                            //System.out.println(str.charAt(i) + "=" + asciiValue);
                        }
    System.out.println(cryptic_msg);
        }   
    
        
}
    
        //***************DECRYPTION*********************
 
    
    public static void decryption(String S){
                decoded_msg="";
        if(check_msg.equalsIgnoreCase("what is your computer name?")){
        decoded_msg= S;
        }
        else if( check_msg.equalsIgnoreCase("what is your mac address?")){
        decoded_msg= S;
        }
        else{
            count++;
            System.out.println("Count is "+count);
            if(count>=6){
            key_change();
            }
    for(int i=0; i<S.length(); i++)
                    {
                                             int asciiValue = S.charAt(i);
                                             if(asciiValue<key)
                                            asciiValue = key- asciiValue;
                                             
                                             else{
                                                 asciiValue=asciiValue-key;
                                                 if(asciiValue<32)
                                                 asciiValue=(asciiValue%127)+94;   /* when ascii gets less than 32 it shows no presentable symbols therefore,
                                                                                    addition of 94 is done to bring it under the range of presentable symbols
                                                                                                        */ 
                                             
                                             }
                                           
                                      System.out.println("When Key="+key+" is added, Ascii Values will become "+asciiValue);
                                            decoded_msg=decoded_msg+""+(char)asciiValue;  // decrypted-msg
                                            asciiValue=0;
                                            //System.out.println(str.charAt(i) + "=" + asciiValue);
                        }
    System.out.println("Encrypted form is : "+S); // encrypted form is displayed on the console
        }   
    
        
}
    
        //**************************Updating KEY**************************************8
        
    private static void key_change(){
    
                //when count becomes equal to 5
            int sum=0;
            count=0;
            int ctr=0;
            String mac_bit ="";
            addr_mac=addr_mac+"-"; 
            for(int i=0;i<3;i++){
                    
                mac_bit="";
            
                
                StringBuffer sb = new StringBuffer(addr_mac);   //it is used to delete characters from the mac address
                
                if(ctr!=2)        // to ignore the '-' in mac address while adding octet
                { mac_bit =""+ addr_mac.charAt(0);}
                sb=sb.deleteCharAt(0);   //deletion takes place
                addr_mac=sb.toString();
                
                System.out.println(addr_mac);
                if(ctr!=2)
                {sum=sum+Integer.parseInt(mac_bit,16);
                addr_mac=addr_mac+mac_bit;}
                
                ctr++;
            }
                if(sum>25){     sum=sum%26;}
                
                key=key+sum;
                sum=0;
                if(key>25){
                key=key%26;
                }
                 System.out.println("NEW KEY IS "+key);
                 System.out.println("NEW MAC ADDRESS "+addr_mac);
        
    }
    
    
    
 
        
        //***********************************************************************
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(client_side.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(client_side.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(client_side.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(client_side.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new client_side().setVisible(true);
            }
        });
        
        try{
        
            s=new Socket("127.0.0.1",1240); //since im running both sides on the same machine, therefore local addr is given. 
            data_in=new DataInputStream(s.getInputStream());
            data_out=new DataOutputStream(s.getOutputStream());
            String rec_msg="";
            
            while(!rec_msg.equals("exit")){
            
                rec_msg=data_in.readUTF();
                
              
                check_msg=rec_msg;
                
                decryption(rec_msg);
                disp_msg.setText(disp_msg.getText().trim()+"\nServer: \t"+decoded_msg);   // displaying the msg
                
                
                
                check_msg=check_msg.toLowerCase();
                
                //Entertaining "What is your computer name?" Automatically! 
                
            if(check_msg.equals("what is your computer name?")){
            
                
                try{
                 String computername=InetAddress.getLocalHost().getHostName();
                 String send_txt="";
        send_txt=computername;
        
        data_out.writeUTF(send_txt); //client sending msg to server
        
        key(send_txt);     //computername as a parameter for making key
        check_msg="";
  }
                
                catch (Exception e){
                                System.out.println("Exception caught ="+e.getMessage());
                                                            }
              
            }
                
                //Entertaining "what is your MAC address" Automatically!
                
                
               else if(check_msg.equals("what is your mac address?")){
                    
                  
                try{
                 InetAddress localaddr = InetAddress.getLocalHost();
                NetworkInterface nt = NetworkInterface.getByInetAddress(localaddr); //gets localhost
                byte[] hardwareAddress = nt.getHardwareAddress(); //gets mac address in array of bytes
               
                //Converting macaddress byte type into String
                
                String[] hexadecimal = new String[hardwareAddress.length];
                for (int i = 0; i < hardwareAddress.length; i++) {
                    hexadecimal[i] = String.format("%02X", hardwareAddress[i]);
                                                                    }
                        String macAddress = String.join("-", hexadecimal); //final macAddress
                                
                        //System.out.println(macAddress);
                        
                        addr_mac=macAddress;
        data_out.writeUTF(macAddress); //client sending macAddress automatically to server
        
        check_msg="";
  }
                catch (Exception e){
                                System.out.println("Exception caught ="+e.getMessage());
                                                            }
            
            }
                
 
                
                
            }
            
            
            
        }
        catch(Exception e){}

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTextArea disp_msg;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton send_btn1;
    private javax.swing.JTextField typed_msg;
    // End of variables declaration//GEN-END:variables
}
